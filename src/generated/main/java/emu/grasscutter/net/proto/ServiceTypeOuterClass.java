// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceType.proto

package emu.grasscutter.net.proto;

public final class ServiceTypeOuterClass {
  private ServiceTypeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code ServiceType}
   */
  public enum ServiceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SERVICE_TYPE_NONE = 0;</code>
     */
    SERVICE_TYPE_NONE(0),
    /**
     * <code>SERVICE_TYPE_CLIENT = 1;</code>
     */
    SERVICE_TYPE_CLIENT(1),
    /**
     * <code>SERVICE_TYPE_GATE = 2;</code>
     */
    SERVICE_TYPE_GATE(2),
    /**
     * <code>SERVICE_TYPE_GAME = 3;</code>
     */
    SERVICE_TYPE_GAME(3),
    /**
     * <code>SERVICE_TYPE_NODE = 4;</code>
     */
    SERVICE_TYPE_NODE(4),
    /**
     * <code>SERVICE_TYPE_DB = 5;</code>
     */
    SERVICE_TYPE_DB(5),
    /**
     * <code>SERVICE_TYPE_SNS = 6;</code>
     */
    SERVICE_TYPE_SNS(6),
    /**
     * <code>SERVICE_TYPE_DISPATCH = 7;</code>
     */
    SERVICE_TYPE_DISPATCH(7),
    /**
     * <code>SERVICE_TYPE_MUIP = 8;</code>
     */
    SERVICE_TYPE_MUIP(8),
    /**
     * <code>SERVICE_TYPE_OFFLINE_MSG = 9;</code>
     */
    SERVICE_TYPE_OFFLINE_MSG(9),
    /**
     * <code>SERVICE_TYPE_MAIL = 10;</code>
     */
    SERVICE_TYPE_MAIL(10),
    /**
     * <code>SERVICE_TYPE_MP = 11;</code>
     */
    SERVICE_TYPE_MP(11),
    /**
     * <code>SERVICE_TYPE_HTTPPROXY = 12;</code>
     */
    SERVICE_TYPE_HTTPPROXY(12),
    /**
     * <code>SERVICE_TYPE_ACTIVITY = 13;</code>
     */
    SERVICE_TYPE_ACTIVITY(13),
    /**
     * <code>SERVICE_TYPE_PATHFINDING = 14;</code>
     */
    SERVICE_TYPE_PATHFINDING(14),
    /**
     * <code>SERVICE_TYPE_SOCIAL = 15;</code>
     */
    SERVICE_TYPE_SOCIAL(15),
    /**
     * <code>SERVICE_TYPE_OA = 16;</code>
     */
    SERVICE_TYPE_OA(16),
    /**
     * <code>SERVICE_TYPE_MATCH = 17;</code>
     */
    SERVICE_TYPE_MATCH(17),
    /**
     * <code>SERVICE_TYPE_OFFLINE_OP = 18;</code>
     */
    SERVICE_TYPE_OFFLINE_OP(18),
    /**
     * <code>SERVICE_TYPE_TOTHEMOON = 19;</code>
     */
    SERVICE_TYPE_TOTHEMOON(19),
    /**
     * <code>SERVICE_TYPE_GCG = 20;</code>
     */
    SERVICE_TYPE_GCG(20),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SERVICE_TYPE_NONE = 0;</code>
     */
    public static final int SERVICE_TYPE_NONE_VALUE = 0;
    /**
     * <code>SERVICE_TYPE_CLIENT = 1;</code>
     */
    public static final int SERVICE_TYPE_CLIENT_VALUE = 1;
    /**
     * <code>SERVICE_TYPE_GATE = 2;</code>
     */
    public static final int SERVICE_TYPE_GATE_VALUE = 2;
    /**
     * <code>SERVICE_TYPE_GAME = 3;</code>
     */
    public static final int SERVICE_TYPE_GAME_VALUE = 3;
    /**
     * <code>SERVICE_TYPE_NODE = 4;</code>
     */
    public static final int SERVICE_TYPE_NODE_VALUE = 4;
    /**
     * <code>SERVICE_TYPE_DB = 5;</code>
     */
    public static final int SERVICE_TYPE_DB_VALUE = 5;
    /**
     * <code>SERVICE_TYPE_SNS = 6;</code>
     */
    public static final int SERVICE_TYPE_SNS_VALUE = 6;
    /**
     * <code>SERVICE_TYPE_DISPATCH = 7;</code>
     */
    public static final int SERVICE_TYPE_DISPATCH_VALUE = 7;
    /**
     * <code>SERVICE_TYPE_MUIP = 8;</code>
     */
    public static final int SERVICE_TYPE_MUIP_VALUE = 8;
    /**
     * <code>SERVICE_TYPE_OFFLINE_MSG = 9;</code>
     */
    public static final int SERVICE_TYPE_OFFLINE_MSG_VALUE = 9;
    /**
     * <code>SERVICE_TYPE_MAIL = 10;</code>
     */
    public static final int SERVICE_TYPE_MAIL_VALUE = 10;
    /**
     * <code>SERVICE_TYPE_MP = 11;</code>
     */
    public static final int SERVICE_TYPE_MP_VALUE = 11;
    /**
     * <code>SERVICE_TYPE_HTTPPROXY = 12;</code>
     */
    public static final int SERVICE_TYPE_HTTPPROXY_VALUE = 12;
    /**
     * <code>SERVICE_TYPE_ACTIVITY = 13;</code>
     */
    public static final int SERVICE_TYPE_ACTIVITY_VALUE = 13;
    /**
     * <code>SERVICE_TYPE_PATHFINDING = 14;</code>
     */
    public static final int SERVICE_TYPE_PATHFINDING_VALUE = 14;
    /**
     * <code>SERVICE_TYPE_SOCIAL = 15;</code>
     */
    public static final int SERVICE_TYPE_SOCIAL_VALUE = 15;
    /**
     * <code>SERVICE_TYPE_OA = 16;</code>
     */
    public static final int SERVICE_TYPE_OA_VALUE = 16;
    /**
     * <code>SERVICE_TYPE_MATCH = 17;</code>
     */
    public static final int SERVICE_TYPE_MATCH_VALUE = 17;
    /**
     * <code>SERVICE_TYPE_OFFLINE_OP = 18;</code>
     */
    public static final int SERVICE_TYPE_OFFLINE_OP_VALUE = 18;
    /**
     * <code>SERVICE_TYPE_TOTHEMOON = 19;</code>
     */
    public static final int SERVICE_TYPE_TOTHEMOON_VALUE = 19;
    /**
     * <code>SERVICE_TYPE_GCG = 20;</code>
     */
    public static final int SERVICE_TYPE_GCG_VALUE = 20;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ServiceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ServiceType forNumber(int value) {
      switch (value) {
        case 0: return SERVICE_TYPE_NONE;
        case 1: return SERVICE_TYPE_CLIENT;
        case 2: return SERVICE_TYPE_GATE;
        case 3: return SERVICE_TYPE_GAME;
        case 4: return SERVICE_TYPE_NODE;
        case 5: return SERVICE_TYPE_DB;
        case 6: return SERVICE_TYPE_SNS;
        case 7: return SERVICE_TYPE_DISPATCH;
        case 8: return SERVICE_TYPE_MUIP;
        case 9: return SERVICE_TYPE_OFFLINE_MSG;
        case 10: return SERVICE_TYPE_MAIL;
        case 11: return SERVICE_TYPE_MP;
        case 12: return SERVICE_TYPE_HTTPPROXY;
        case 13: return SERVICE_TYPE_ACTIVITY;
        case 14: return SERVICE_TYPE_PATHFINDING;
        case 15: return SERVICE_TYPE_SOCIAL;
        case 16: return SERVICE_TYPE_OA;
        case 17: return SERVICE_TYPE_MATCH;
        case 18: return SERVICE_TYPE_OFFLINE_OP;
        case 19: return SERVICE_TYPE_TOTHEMOON;
        case 20: return SERVICE_TYPE_GCG;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ServiceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ServiceType>() {
            public ServiceType findValueByNumber(int number) {
              return ServiceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return emu.grasscutter.net.proto.ServiceTypeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final ServiceType[] VALUES = values();

    public static ServiceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ServiceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ServiceType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021ServiceType.proto*\223\004\n\013ServiceType\022\025\n\021S" +
      "ERVICE_TYPE_NONE\020\000\022\027\n\023SERVICE_TYPE_CLIEN" +
      "T\020\001\022\025\n\021SERVICE_TYPE_GATE\020\002\022\025\n\021SERVICE_TY" +
      "PE_GAME\020\003\022\025\n\021SERVICE_TYPE_NODE\020\004\022\023\n\017SERV" +
      "ICE_TYPE_DB\020\005\022\024\n\020SERVICE_TYPE_SNS\020\006\022\031\n\025S" +
      "ERVICE_TYPE_DISPATCH\020\007\022\025\n\021SERVICE_TYPE_M" +
      "UIP\020\010\022\034\n\030SERVICE_TYPE_OFFLINE_MSG\020\t\022\025\n\021S" +
      "ERVICE_TYPE_MAIL\020\n\022\023\n\017SERVICE_TYPE_MP\020\013\022" +
      "\032\n\026SERVICE_TYPE_HTTPPROXY\020\014\022\031\n\025SERVICE_T" +
      "YPE_ACTIVITY\020\r\022\034\n\030SERVICE_TYPE_PATHFINDI" +
      "NG\020\016\022\027\n\023SERVICE_TYPE_SOCIAL\020\017\022\023\n\017SERVICE" +
      "_TYPE_OA\020\020\022\026\n\022SERVICE_TYPE_MATCH\020\021\022\033\n\027SE" +
      "RVICE_TYPE_OFFLINE_OP\020\022\022\032\n\026SERVICE_TYPE_" +
      "TOTHEMOON\020\023\022\024\n\020SERVICE_TYPE_GCG\020\024B\033\n\031emu" +
      ".grasscutter.net.protob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
