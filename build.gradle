import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.plugins.ide.eclipse.model.SourceFolder

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
    id 'java' // Apply the java plugin to add support for Java
    id 'java-library' // Apply the java-library plugin for API and implementation separation.
    id 'application' // Apply the application plugin to add support for building a CLI application
    id 'com.google.protobuf' version '0.8.18' // Apply the protobuf auto generator
    id 'com.diffplug.spotless' version '6.11.0' // Apply the Spotless linter plugin.

    id 'eclipse' // Eclipse Support
    id 'idea' // IntelliJ Support

    id 'maven-publish' // Support for publishing to Maven repositories.
    id 'signing' // Support for signing build artifacts.

    id 'io.freefair.lombok' version '6.6.1' // Lombok for delombok'ification
}

spotless {
    java {
        target fileTree(rootDir) {
            include '**/*.java'
            exclude '**/generated/**/*.*'
            exclude '.idea/**/*.*'
        }

        importOrder('io.grasscutter', '', 'java', 'javax', '\\#java', '\\#') // Configure import order.
        googleJavaFormat('1.15.0') // Use Google's Java formatter.
        formatAnnotations() // Reformat annotations.
        endWithNewline() // Ensure files end with a newline.
        indentWithTabs(2); indentWithSpaces(4) // Use 4 spaces for indentation.
        toggleOffOn() // Toggle off/on.
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = 'io.grasscutter'
version = '1.7.1'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    // Additional JAR libraries.
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.8'

    // Logging libraries.
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.7'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.7'

    // Line reading libraries.
    implementation group: 'org.jline', name: 'jline', version: '3.21.0'
    implementation group: 'org.jline', name: 'jline-terminal-jna', version: '3.21.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.10.0'

    // Java Netty for networking.
    implementation group: 'io.netty', name: 'netty-common', version: '4.1.86.Final'
    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.86.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.86.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.86.Final'

    // Serialization.
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.19.6'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'
    implementation platform('com.fasterxml.jackson:jackson-bom:2.14.0')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.2'

    // Reflections libraries.
    implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
    implementation group: 'com.esotericsoftware', name: 'reflectasm', version: '1.11.9'
    implementation group: 'com.github.davidmoten', name: 'rtree-multi', version: '0.1'

    // MongoDB object mapper.
    implementation group: 'dev.morphia.morphia', name: 'morphia-core', version: '2.2.7'

    // Utility libraries.
    implementation group: 'org.greenrobot', name: 'eventbus-java', version: '3.3.1'
    // implementation group: 'org.danilopianini', name: 'java-quadtree', version: '0.1.9'

    // Long-term scheduler.
    implementation group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
    implementation group: 'org.quartz-scheduler', name: 'quartz-jobs', version: '2.3.2'

    // Lua script engine library.
    implementation group: 'org.luaj', name: 'luaj-jse', version: '3.0.1'

    // Java HTTP server library.
    implementation group: 'io.javalin', name: 'javalin', version: '5.5.0'
    // Java WebSocket server & client library.
    implementation group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.5.2'

    // Google Protocol Buffer definitions.
    // These are the raw '.proto' files.
    protobuf files('proto/')

    // Testing libraries.
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'

    // HTTP client library for testing.
    testImplementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.10.0'

    // Lombok.
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
}

configurations.configureEach {
    exclude group: 'org.slf4j', module: 'slf4j'
}

application {
    // Define the main class for the application
    getMainClass().set('emu.grasscutter.Grasscutter')
}

jar {
    exclude '*.proto'

    manifest {
        attributes 'Main-Class': 'emu.grasscutter.Grasscutter'
    }

    archiveBaseName = 'grasscutter'
    if (project.hasProperty('jarFilename')) {
        archiveFileName = "${jarFilename}.${archiveExtension}"
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from('src/main/java') {
        include '*.xml'
    }

    destinationDirectory = file('.')
}

test {
    useJUnitPlatform()
    setMaxHeapSize('4G')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'grasscutter'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Grasscutter'
                description = 'A server software reimplementation for an anime game.'
                url = 'https://github.com/Grasscutters/Grasscutter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'meledy'
                        name = 'Meledy'
                        email = 'meledy@grasscutter.io' // not a real email kek
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:Grasscutters/Grasscutter.git'
                    developerConnection = 'scm:git:ssh://github.com:Grasscutters/Grasscutter.git'
                    url = 'https://github.com/Grasscutters/Grasscutter'
                }
            }
        }
    }

    repositories {
        maven {
            if (version.endsWith('-dev')) {
                // Check if the action being ran is 'publish'.
                if (publish.state.executing) {
                    println('Publishing to Ben4J-Maven')
                }

                url 'https://repo.4benj.com/releases'
                name '4benj-maven'
                credentials {
                    username System.getenv('benj_maven_username')
                    password System.getenv('benj_maven_token')
                }
            } else {
                // Check if the action being ran is 'publish'.
                if (publish.state.executing) {
                    println('Publishing to Sonatype')
                }

                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                name = 'sonatype'
                credentials(PasswordCredentials)
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.18.1'
    }

    generatedFilesBaseDir = "$projectDir/src/generated/"
}

sourceSets {
    main {
        proto {
            // In addition to the default 'src/main/proto'
            srcDir 'src/generated'
        }
        java {
            srcDir 'src/generated/main/java'
        }
    }
}

idea {
    module {
        // proto files and generated Java files are automatically added as
        // source dirs.
        // If you have additional sources, add them here:
        sourceDirs += file('/proto/')
    }
}

eclipse {
    classpath {
        file.whenMerged {
            cp -> cp.entries.add(new SourceFolder('src/generated/main/java', null))
        }
    }
}

signing {
    if (!version.endsWith('-dev')) {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    // Add this to avoid warning caused by lack of comments in proto generated java files
    options.addStringOption('Xdoclint:none', '-quiet')
    exclude '**/*.md'
    exclude 'src/handbook/**/*.*'
    exclude 'src/generated/**/*.*'
}

tasks.register('injectGitHash') {
    def gitCommitHash = {
        try {
            return 'git rev-parse --verify --short HEAD'.execute().text.trim()
        } catch (ignored) {
            return 'GIT_NOT_FOUND'
        }
    }

    new File(projectDir, 'src/main/java/emu/grasscutter/BuildConfig.java').text = """package emu.grasscutter;

public final class BuildConfig {
    public static final String VERSION = \"${version}\";
    public static final String GIT_HASH = \"${gitCommitHash()}\";
}"""
}

tasks.register('generateHandbook') {
    if (project.hasProperty('skipHandbook')) {
        println('Skipping handbook generation.')
        return
    }

    // Resolve the NPM command.
    var npm = 'npm'
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        npm = 'npm.cmd'

    def npmVersion = {
        try {
            return "${npm} --version".execute()
        } catch (ignored) {
            ignored.printStackTrace()
            return 'NPM_NOT_FOUND'
        }
    }

    // Check if Node is installed.
    if (npmVersion() == 'NPM_NOT_FOUND') {
        println('NPM is not installed. Skipping handbook generation.')
    } else {
        // Check if the handbook resources are present.
        if (!file('src/handbook/data/commands.json').exists()) {
            println('Command data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/avatars.csv').exists()) {
            println('Avatar data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/entities.csv').exists()) {
            println('Entity data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/items.csv').exists()) {
            println('Item data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/mainquests.csv').exists()) {
            println('Main quest data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/quests.csv').exists()) {
            println('Quest data was not found. Skipping handbook generation.')
            return
        }
        if (!file('src/handbook/data/scenes.csv').exists()) {
            println('Scene data was not found. Skipping handbook generation.')
            return
        }

        // Install dependencies before building.
        exec {
            workingDir 'src/handbook'
            commandLine npm, 'install'
        }

        // Build the handbook.
        exec {
            workingDir 'src/handbook'
            commandLine npm, 'run', 'build'
        }

        // Copy the handbook from /dist to /src/main/resources.
        copy {
            from 'src/handbook/dist/index.html'
            into 'src/main/resources/html'
            rename 'index.html', 'handbook.html'
        }
    }
}

processResources {
    dependsOn 'generateProto'
}

sourcesJar {
    dependsOn 'generateProto'
}

delombok {
    dependsOn 'generateProto'
}

// For terminal interacting in IDEA running
run {
    standardInput = System.in
}
